//
//  AlbumViewController.swift
//  VKPhotoViewer
//
//  Created by PenguinRaja on 01.08.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import VK_ios_sdk

protocol AlbumDisplayLogic: class {
    func displayAlbum(viewModel: Album.ShowAlbum.ViewModel)
}

private let reuseIdentifier = "Cell"

class AlbumViewController: UICollectionViewController, AlbumDisplayLogic {
    
    //@IBOutlet private var nameTextField: UITextField!
    
    var interactor: AlbumBusinessLogic?
    var router: (NSObjectProtocol & AlbumRoutingLogic & AlbumDataPassing)?
    
//    private var items: [CellIdentifiable] = []
    
    private let networkManager = NetworkManager(networkComponents: NetworkComponents())
    private var albumCount = 0 {
        didSet {
            collectionView.reloadData()
        }
    }
    private var album: [Photo]? {
        didSet {
            collectionView.reloadData()
        }
    }
    
    let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "ru_RU")
        dateFormatter.dateFormat = "d MMMM yyyy"
        return dateFormatter
    } ()
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        collectionView.backgroundColor = .white
        self.collectionView!.register(PhotoCell.self, forCellWithReuseIdentifier: reuseIdentifier)
        passRequest()
        
        setupNavigationBar()
    }
    
    // MARK: Do something
    
    func displayAlbum(viewModel: Album.ShowAlbum.ViewModel) {
        albumCount = viewModel.count
        album = viewModel.items
    }
    
    private func setupNavigationBar() {
        title = "Mobile Up Gallery"
        
        let logOutButton = UIBarButtonItem(
            title: "Выход",
            style: .plain,
            target: self,
            action: #selector(logOutAction))
        
        logOutButton.tintColor = .black
        navigationItem.rightBarButtonItem = logOutButton
    }
    
    @objc private func logOutAction(){
        dismiss(animated: true) {
            VKSdk.forceLogout()
        }
    }
    
    // MARK: - PassRequest
    
    private func passRequest() {
        interactor?.fetchAlbum()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AlbumInteractor()
        let presenter = AlbumPresenter()
        let router = AlbumRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

// MARK:- UICollectionViewDataSource

extension AlbumViewController {
    
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return albumCount
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! PhotoCell
        
//        cell.set(viewModel: <#T##PhotoCellViewModel#>)
        guard let url = album?[indexPath.row].imgSrc else { return cell}
        cell.photoItem.fetchImage(from: url)
        cell.spinnerView.stopAnimating()
        
        return cell
    }
    
    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        guard let url = album?[indexPath.row].imgSrc else { return }
        guard let datePhoto = album?[indexPath.row].date else { return}
        let photoVC = PhotoViewController()
        photoVC.photoImageView.fetchImage(from: url)
        
        let date = Date(timeIntervalSince1970: TimeInterval(datePhoto))
        let dateTitle = self.dateFormatter.string(from: date)
        
        photoVC.navigationTitle = dateTitle

        let navVC = UINavigationController(rootViewController: photoVC)
        navVC.modalPresentationStyle = .fullScreen
        
        present(navVC, animated: true)
    }
}

// MARK: - UICollectionViewDelegateFlowLayout

extension AlbumViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let size:CGFloat = (collectionView.frame.size.width - 3) / 2.0
        return CGSize(width: size, height: size)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        UIEdgeInsets(top: 1, left: 1, bottom: 1, right: 1)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        1
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        1
    }
    
}
